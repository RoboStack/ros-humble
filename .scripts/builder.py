"""
Builder Module

This module handles building ROS recipes and packages for Ubuntu Linux RoboStack projects. 
It provides a streamlined workflow for generating recipes, building packages, 
and logging the output of these processes.

Functions:
    - build_recipes: Prepares a clean environment, generates ROS recipes, and logs the process.
    - build_packages: Builds ROS packages from the generated recipes and logs the output.
    - run_all: Executes the full workflow of building recipes and packages.

Typical Usage Example:
    >>> import builder
    >>> builder.run_all()  # Generates recipes and builds packages, logging the process.

    Alternatively, individual steps can be run:
    >>> builder.build_recipes()  # Generates recipes only.
    >>> log_path = builder.build_packages()  # Builds packages and retrieves the log file path.
"""





import os
import shutil
import datetime



def build_recipes():
    """
    Builds ROS recipes using the Vinca tool and logs the process.

    This function performs the following actions:
    1. Removes the existing `recipes` directory if it exists to ensure a clean environment.
    2. Creates a new `recipes` directory to store the generated recipes.
    3. Executes the `vinca -m` command to generate ROS recipes.
    4. Captures the output of the `vinca` command and writes it to a timestamped log file in the `logs` directory.

    Log files are named using the format `boa_recipe_log_<timestamp>.txt`.

    Args:
        None

    Returns:
        None

    Raises:
        OSError: If there are issues creating or removing directories.

    Side Effects:
        - Deletes and recreates the `recipes` directory.
        - Creates a `logs` directory if it does not exist.
        - Writes the output of the `vinca` command to a log file.

    Example:
        >>> build_recipes()
        Cleaning recipes
        [Output of vinca command]
    """
    time = datetime.datetime.today()

    if os.path.exists(f"./recipes/"):
        print("Cleaning recipes")
        shutil.rmtree(f"./recipes/")

    if not os.path.exists(f"./logs"):
        os.mkdir("./logs")
    
    os.mkdir(f"./recipes")

    br = os.popen(f"cd . && vinca -m").read()
    print(br)
    
    with open(f"./logs/boa_recipe_log_{time}.txt", 'w') as file:
        file.write(br)

def build_packages():
    """
    Builds ROS packages from ROS recipes using the Boa build tool.

    This function:
    1. Executes the `boa build` command with specified configuration files.
    2. Captures the build output, including both stdout and stderr, and writes it to a timestamped log file.

    The log file is stored in the `logs` directory with a name in the format `boa_package_log_<timestamp>.txt`.

    Returns:
        str: The path to the generated package build log file.

    Raises:
        OSError: If there are issues creating the `logs` directory.

    Side Effects:
        - Creates a `logs` directory if it does not exist.
        - Executes a shell command to build ROS packages.
        - Writes the output of the `boa build` command to a log file.

    Example:
        >>> log_path = build_packages()
        >>> print(log_path)
        logs/boa_package_log_2024-11-10 10:12:34.567890.txt
    """
    time = datetime.datetime.today()
    if not os.path.exists(f"./logs"):
        os.mkdir("./logs")
    os.popen(f"cd . && boa build recipes -m ./.ci_support/conda_forge_pinnings.yaml -m ./conda_build_config.yaml > './logs/boa_package_log_{time}.txt' 2>&1").read()
    return f"logs/boa_package_log_{time}.txt"

def run_all():
    """
    Executes the complete workflow to build ROS recipes and packages.

    This function:
    1. Calls `build_recipes` to generate ROS recipes in a clean environment.
    2. Calls `build_packages` to build ROS packages using the generated recipes.
    3. Returns the path to the generated package build log file.

    Returns:
        str: The path to the package build log file generated by `build_packages`.

    Raises:
        OSError: If there are issues during directory creation or file handling in the called functions.
        Exception: Propagates any exceptions raised by `build_recipes` or `build_packages`.

    Side Effects:
        - Deletes and recreates the `recipes` directory.
        - Creates a `logs` directory if it does not exist.
        - Executes shell commands for building recipes and packages.
        - Writes log files to the `logs` directory.

    Example:
        >>> log_path = run_all()
        >>> print(log_path)
        logs/boa_package_log_2024-11-10 10:12:34.567890.txt
    """
    build_recipes()
    return build_packages()
    
if __name__ =="__main__":
    run_all()