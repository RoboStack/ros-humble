diff --git a/gripper_controllers/CMakeLists.txt b/gripper_controllers/CMakeLists.txt
index 676062f7a3..c4a85dd453 100644
--- a/gripper_controllers/CMakeLists.txt
+++ b/gripper_controllers/CMakeLists.txt
@@ -45,6 +45,10 @@ target_link_libraries(gripper_action_controller PUBLIC
 )
 ament_target_dependencies(gripper_action_controller PUBLIC ${THIS_PACKAGE_INCLUDE_DEPENDS})
 
+# Causes the visibility macros to use dllexport rather than dllimport,
+# which is appropriate when building the dll but not consuming it.
+target_compile_definitions(gripper_action_controller PRIVATE "GRIPPER_ACTION_CONTROLLER_BUILDING_DLL")
+
 pluginlib_export_plugin_description_file(controller_interface ros_control_plugins.xml)
 
 if(BUILD_TESTING)
diff --git a/gripper_controllers/include/gripper_controllers/gripper_action_controller.hpp b/gripper_controllers/include/gripper_controllers/gripper_action_controller.hpp
index 38e0bd8191..2762cbf611 100644
--- a/gripper_controllers/include/gripper_controllers/gripper_action_controller.hpp
+++ b/gripper_controllers/include/gripper_controllers/gripper_action_controller.hpp
@@ -148,15 +148,20 @@ class GripperActionController : public controller_interface::ControllerInterface
 
   rclcpp::TimerBase::SharedPtr goal_handle_timer_;
 
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   rclcpp_action::GoalResponse goal_callback(
     const rclcpp_action::GoalUUID & uuid, std::shared_ptr<const GripperCommandAction::Goal> goal);
 
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   rclcpp_action::CancelResponse cancel_callback(const std::shared_ptr<GoalHandle> goal_handle);
 
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   void accepted_callback(std::shared_ptr<GoalHandle> goal_handle);
 
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   void preempt_active_goal();
 
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   void set_hold_position();
 
   rclcpp::Time last_movement_time_ = rclcpp::Time(0, 0, RCL_ROS_TIME);  ///< Store stall time
@@ -165,6 +170,7 @@ class GripperActionController : public controller_interface::ControllerInterface
   /**
    * \brief Check for success and publish appropriate result and feedback.
    **/
+  GRIPPER_ACTION_CONTROLLER_PUBLIC
   void check_for_success(
     const rclcpp::Time & time, double error_position, double current_position,
     double current_velocity);
