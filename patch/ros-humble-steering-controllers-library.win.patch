diff --git a/steering_controllers_library/CMakeLists.txt b/steering_controllers_library/CMakeLists.txt
index 88f24d304c..106fdcc464 100644
--- a/steering_controllers_library/CMakeLists.txt
+++ b/steering_controllers_library/CMakeLists.txt
@@ -51,7 +51,7 @@ ament_target_dependencies(steering_controllers_library PUBLIC ${THIS_PACKAGE_INC
 
 # Causes the visibility macros to use dllexport rather than dllimport,
 # which is appropriate when building the dll but not consuming it.
-target_compile_definitions(steering_controllers_library PRIVATE "STEERING_CONTROLLERS_BUILDING_DLL")
+target_compile_definitions(steering_controllers_library PRIVATE "STEERING_CONTROLLERS__VISIBILITY_BUILDING_DLL" "_USE_MATH_DEFINES")
 
 if(BUILD_TESTING)
   find_package(ament_cmake_gmock REQUIRED)
diff --git a/steering_controllers_library/include/steering_controllers_library/steering_controllers_library.hpp b/steering_controllers_library/include/steering_controllers_library/steering_controllers_library.hpp
index b560e2a782..5e3264fd67 100644
--- a/steering_controllers_library/include/steering_controllers_library/steering_controllers_library.hpp
+++ b/steering_controllers_library/include/steering_controllers_library/steering_controllers_library.hpp
@@ -89,7 +89,7 @@ class SteeringControllersLibrary : public controller_interface::ChainableControl
   using AckermanControllerState = control_msgs::msg::SteeringControllerStatus;
 
 protected:
-  controller_interface::CallbackReturn set_interface_numbers(
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC controller_interface::CallbackReturn set_interface_numbers(
     size_t nr_state_itfs, size_t nr_cmd_itfs, size_t nr_ref_itfs);
 
   std::shared_ptr<steering_controllers_library::ParamListener> param_listener_;
@@ -112,9 +112,9 @@ class SteeringControllersLibrary : public controller_interface::ChainableControl
   std::unique_ptr<ControllerStatePublisherTf> rt_tf_odom_state_publisher_;
 
   // override methods from ChainableControllerInterface
-  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;
 
-  bool on_set_chained_mode(bool chained_mode) override;
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC bool on_set_chained_mode(bool chained_mode) override;
 
   /// Odometry:
   steering_odometry::SteeringOdometry odometry_;
diff --git a/steering_controllers_library/include/steering_controllers_library/steering_odometry.hpp b/steering_controllers_library/include/steering_controllers_library/steering_odometry.hpp
index 95bcef7e63..f1d63287cd 100644
--- a/steering_controllers_library/include/steering_controllers_library/steering_odometry.hpp
+++ b/steering_controllers_library/include/steering_controllers_library/steering_odometry.hpp
@@ -26,6 +26,8 @@
 
 #include "rcpputils/rolling_mean_accumulator.hpp"
 
+#include "steering_controllers_library/visibility_control.h"
+
 namespace steering_odometry
 {
 const unsigned int BICYCLE_CONFIG = 0;
@@ -45,12 +47,14 @@ class SteeringOdometry
    * \param velocity_rolling_window_size Rolling window size used to compute the velocity mean
    *
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   explicit SteeringOdometry(size_t velocity_rolling_window_size = 10);
 
   /**
    * \brief Initialize the odometry
    * \param time Current time
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void init(const rclcpp::Time & time);
 
   /**
@@ -60,6 +64,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_position(
     const double traction_wheel_pos, const double steer_pos, const double dt);
 
@@ -71,6 +76,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_position(
     const double right_traction_wheel_pos, const double left_traction_wheel_pos,
     const double steer_pos, const double dt);
@@ -84,6 +90,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_position(
     const double right_traction_wheel_pos, const double left_traction_wheel_pos,
     const double right_steer_pos, const double left_steer_pos, const double dt);
@@ -95,6 +102,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_velocity(
     const double traction_wheel_vel, const double steer_pos, const double dt);
 
@@ -106,6 +114,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_velocity(
     const double right_traction_wheel_vel, const double left_traction_wheel_vel,
     const double steer_pos, const double dt);
@@ -119,6 +128,7 @@ class SteeringOdometry
    * \param dt      time difference to last call
    * \return true if the odometry is actually updated
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   bool update_from_velocity(
     const double right_traction_wheel_vel, const double left_traction_wheel_vel,
     const double right_steer_pos, const double left_steer_pos, const double dt);
@@ -129,53 +139,62 @@ class SteeringOdometry
    * \param angular Angular velocity [rad/s]
    * \param time    Current time
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void update_open_loop(const double linear, const double angular, const double dt);
 
   /**
    * \brief Set odometry type
    * \param type odometry type
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void set_odometry_type(const unsigned int type);
 
   /**
    * \brief heading getter
    * \return heading [rad]
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   double get_heading() const { return heading_; }
 
   /**
    * \brief x position getter
    * \return x position [m]
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   double get_x() const { return x_; }
 
   /**
    * \brief y position getter
    * \return y position [m]
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   double get_y() const { return y_; }
 
   /**
    * \brief linear velocity getter
    * \return linear velocity [m/s]
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   double get_linear() const { return linear_; }
 
   /**
    * \brief angular velocity getter
    * \return angular velocity [rad/s]
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   double get_angular() const { return angular_; }
 
   /**
    * \brief Sets the wheel parameters: radius, separation and wheelbase
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void set_wheel_params(double wheel_radius, double wheelbase = 0.0, double wheel_track = 0.0);
 
   /**
    * \brief Velocity rolling window size setter
    * \param velocity_rolling_window_size Velocity rolling window size
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void set_velocity_rolling_window_size(size_t velocity_rolling_window_size);
 
   /**
@@ -184,12 +203,14 @@ class SteeringOdometry
    * \param theta_dot Desired angular velocity [rad/s]
    * \return Tuple of velocity commands and steering commands
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   std::tuple<std::vector<double>, std::vector<double>> get_commands(
     const double Vx, const double theta_dot);
 
   /**
    *  \brief Reset poses, heading, and accumulators
    */
+  STEERING_CONTROLLERS__VISIBILITY_PUBLIC
   void reset_odometry();
 
 private:
